(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.CanvasFreeDrawing=b()})(this,function(){"use strict";return class{constructor(a={}){const{elementId:e=this.requiredParam("elementId"),width:f=this.requiredParam("width"),height:g=this.requiredParam("height"),lineWidth:b,strokeColor:c,disabled:d}=a;this.elementId=e,this.canvas=document.getElementById(this.elementId),this.context=this.canvas.getContext("2d",{alpha:!1}),this.width=f,this.height=g,this.isDrawing=!1,this.lineWidth=b||5,this.bucketToolTolerance=0,this.lastPath=null,this.imageRestored=!1,this.positions=[],this.leftCanvasDrawing=!1,this.selectedBucket=!1,this.allowedEvents=["redraw","mouseup","mousedown","mouseenter","mouseleave"],this.isCursorHidden=!1,this.strokeColor=this.validateColor(c,!0),this.bucketToolColor=this.validateColor(c,!0),this.redrawEvent=new Event("cfd_redraw"),this.mouseUpEvent=new Event("cfd_mouseup"),this.mouseDownEvent=new Event("cfd_mousedown"),this.mouseEnterEvent=new Event("cfd_mouseenter"),this.mouseLeaveEvent=new Event("cfd_mouseleave"),this.mouseDown=this.mouseDown.bind(this),this.mouseMove=this.mouseMove.bind(this),this.mouseLeave=this.mouseLeave.bind(this),this.mouseUp=this.mouseUp.bind(this),this.mouseUpDocument=this.mouseUpDocument.bind(this),this.setDimensions(),this.setBackground([255,255,255]),d||this.enableDrawing()}requiredParam(a){throw new Error(`${a} is required`)}addListeners(){this.canvas.addEventListener("mousedown",this.mouseDown),this.canvas.addEventListener("mousemove",this.mouseMove),this.canvas.addEventListener("mouseleave",this.mouseLeave),this.canvas.addEventListener("mouseup",this.mouseUp),document.addEventListener("mouseup",this.mouseUpDocument)}removeListeners(){this.canvas.removeEventListener("mousedown",this.mouseDown),this.canvas.removeEventListener("mouseMove",this.mouseMove),this.canvas.removeEventListener("mouseLeave",this.mouseLeave),this.canvas.removeEventListener("mouseUp",this.mouseUp),document.removeEventListener("mouseUp",this.mouseUpDocument)}enableDrawing(){this.addListeners(),this.toggleCursor()}disableDrawing(){this.removeListeners(),this.toggleCursor()}mouseDown(){if(0!==event.button)return;const a=event.pageX-this.canvas.offsetLeft,b=event.pageY-this.canvas.offsetTop;if(this.selectedBucket)return void this.fill(a,b,this.bucketToolColor,this.bucketToolTolerance);this.isDrawing=!0;const c=this.storeDrawing(a,b,!1);this.lastPath=c-1,this.canvas.dispatchEvent(this.mouseDownEvent),this.redraw()}mouseMove(){if(this.leftCanvasDrawing&&(this.leftCanvasDrawing=!1,this.mouseDown(event)),this.isDrawing){const a=event.pageX-this.canvas.offsetLeft,b=event.pageY-this.canvas.offsetTop;this.storeDrawing(a,b,!0),this.redraw()}}mouseUp(){this.isDrawing=!1,this.canvas.dispatchEvent(this.mouseUpEvent)}mouseUpDocument(){this.leftCanvasDrawing=!1}mouseLeave(){this.isDrawing&&(this.leftCanvasDrawing=!0),this.isDrawing=!1,this.canvas.dispatchEvent(this.mouseLeaveEvent)}mouseEnter(){this.canvas.dispatchEvent(this.mouseEnterEvent)}toggleCursor(){this.canvas.style.cursor="crosshair"===this.canvas.style.cursor?"auto":"crosshair"}storeDrawing(a,b,c){return this.positions.push({x:a,y:b,moving:c})}redraw(a){this.context.strokeStyle=this.rgbaFromArray(this.strokeColor),this.context.lineJoin="round",this.context.lineWidth=this.lineWidth;let b=[];b=a?this.positions:this.positions.slice(this.lastPath),b.forEach(({x:a,y:c,moving:d},e)=>{this.context.beginPath(),d&&e?this.context.moveTo(b[e-1].x,b[e-1].y):this.context.moveTo(a-1,c),this.context.lineTo(a,c),this.context.closePath(),this.context.stroke()}),this.canvas.dispatchEvent(this.redrawEvent)}fill(a,b,c,d){if(0===this.positions.length&&!this.imageRestored)return void this.setBackground(c,!1);if("object"!=typeof c)throw new Error("New color must be an array like: [255, 255, 255, 255]");const e=this.context.getImageData(0,0,this.width,this.height),f=e.data,g=this.getNodeColor(a,b,f),h=this.getNodeColor(a,b,f);if(!this.isNodeColorEqual(h,c,d)&&this.isNodeColorEqual(g,h)){for(const g=[[a,b]];g.length&&!(g.length>this.width*this.height);){const a=g.pop();let b=a,i=a;for(;this.isNodeColorEqual(this.getNodeColor(b[0]-1,b[1],f),h,d);)b=[b[0]-1,b[1]];for(;this.isNodeColorEqual(this.getNodeColor(i[0]+1,i[1],f),h,d);)i=[i[0]+1,i[1]];const e=b[0],j=i[0];for(let a=e;a<=j;a++)this.setNodeColor(a,b[1],c,f),this.isNodeColorEqual(this.getNodeColor(a,b[1]+1,f),h,d)&&g.push([a,b[1]+1]),this.isNodeColorEqual(this.getNodeColor(a,b[1]-1,f),h,d)&&g.push([a,b[1]-1])}this.context.putImageData(e,0,0),this.canvas.dispatchEvent(this.redrawEvent)}}isNodeColorEqual(a,b,c){var d=Math.abs;return c?d(b[0]-a[0])<=c&&d(b[1]-a[1])<=c&&d(b[2]-a[2])<=c:a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[3]}getNodeColor(a,b,c){const d=4*(a+b*this.width);return[c[d],c[d+1],c[d+2],c[d+3]]}setNodeColor(a,b,c,d){const e=4*(a+b*this.width);d[e]=c[0],d[e+1]=c[1],d[e+2]=c[2],d[e+3]=c[3]}rgbaFromArray(b){return`rgba(${b[0]},${b[1]},${b[2]},${b[3]})`}rgbFromArray(b){return`rgb(${b[0]},${b[1]},${b[2]})`}setDimensions(){this.canvas.height=this.height,this.canvas.width=this.width}validateColor(a,b){if("object"==typeof a&&4===a.length&&a.pop(),"object"==typeof a&&3===a.length){const b=[...a,255];return b}return b?[0,0,0,255]:(console.warn("Color was not valid!"),null)}on(a,b){this.allowedEvents.includes(a)&&this.canvas.addEventListener("cfd_"+a,()=>b())}setLineWidth(a){this.lineWidth=a}setBackground(a,b=!0){const c=this.validateColor(a);c&&(b&&(this.backgroundColor=c),this.context.fillStyle=this.rgbaFromArray(c),this.context.fillRect(0,0,this.width,this.height))}setDrawingColor(a){this.setBucketTool({color:a}),this.setStrokeColor(a)}setStrokeColor(a){this.strokeColor=this.validateColor(a,!0)}setBucketTool(a){const{color:b=null,tolerance:c=null}=a;b&&(this.bucketToolColor=this.validateColor(b)),c&&0<c&&(this.bucketToolTolerance=c)}toggleBucket(){return this.selectedBucket=!this.selectedBucket}isBucketActive(){return this.selectedBucket}clear(){this.context.clearRect(0,0,this.width,this.height),this.lastPath=null,this.positions=[],this.isDrawing=!1,this.setBackground(this.backgroundColor)}save(){return this.canvas.toDataURL()}restore(a){const b=new Image;b.src=a,b.onload=()=>{this.imageRestored=!0,this.context.drawImage(b,0,0)}}}});